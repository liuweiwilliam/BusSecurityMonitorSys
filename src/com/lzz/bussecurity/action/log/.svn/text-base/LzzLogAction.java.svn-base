package com.lzz.bussecurity.action.log;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.Transaction;

import com.lzz.bussecurity.action.LzzBaseManagerAction;
import com.lzz.bussecurity.factory.LzzFactory;
import com.lzz.bussecurity.mgr.LzzAlarmHandleMgr;
import com.lzz.bussecurity.mgr.LzzBusMgr;
import com.lzz.bussecurity.mgr.LzzDicMgr;
import com.lzz.bussecurity.mgr.LzzSensorDataMgr;
import com.lzz.bussecurity.mgr.LzzUserMgr;
import com.lzz.bussecurity.pojo.LzzAlarmHandleRecord;
import com.lzz.bussecurity.pojo.LzzBus;
import com.lzz.bussecurity.pojo.LzzRepair;
import com.lzz.bussecurity.pojo.LzzSensorAlarmData;
import com.lzz.bussecurity.pojo.LzzSensorData;
import com.lzz.bussecurity.service.LzzAlarmHandleRecordService;
import com.lzz.bussecurity.service.LzzBusService;
import com.lzz.bussecurity.service.LzzRepairService;
import com.lzz.bussecurity.service.LzzSensorDataService;
import com.lzz.bussecurity.service.LzzSensorService;
import com.lzz.bussecurity.utils.LzzException;
import com.lzz.bussecurity.utils.LzzFilter;
import com.lzz.bussecurity.utils.LzzPaging;

public class LzzLogAction extends LzzBaseManagerAction {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -6578139374345733548L;
	
	/**
	 * 想要获取的目标车辆IDs
	 */
	public String busIds;
	/**
	 * 起始时间段
	 */
	public String startTime;
	/**
	 * 结束时间段
	 */
	public String endTime;
	
	/**
	 * 分页信息
	 */
	public String pageInfo;
	/**
	 * 获取公交传感器数据
	 * @return
	 */
	public String getSensorDataList() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			List<String> ids = new ArrayList<String>();
			if(null!=busIds){//获取指定车辆的
				ids = stringToArray(busIds);
			}else{//获取名下管理车辆的
				ids = LzzBusMgr.getUserMgrBusesIDList(curUser);
			}
			
			for(int i=0; i<ids.size(); i++){
				List<LzzSensorData> sensor_datas = LzzSensorDataService.self().getLzzSensorDataListByBusId(ids.get(i));
				for(int j=sensor_datas.size()-1; j>=0; j--){
					LzzSensorData sensor_data = sensor_datas.get(j);
					JSONObject obj = JSONObject.fromObject(sensor_data);
					obj.put("statusId", LzzDicMgr.isAlarmStatus(sensor_data.getStatusId())?"1":"0");
					data.add(obj);
				}
			}
			
			LzzFilter filter = new LzzFilter();
			if(null!=startTime){
				filter.addFilter("ge", "time", startTime, null);
			}
			
			if(null!=endTime){
				filter.addFilter("lt", "time", endTime, null);
			}
			filter.filter(data);
			
			if(null!=pageInfo){
				JSONObject pageInfoObj = JSONObject.fromObject(pageInfo);
				if(null!=pageInfo){
					data = LzzPaging.get(data, pageInfoObj);
				}
				rslt.put("pageInfo", pageInfoObj);
			}
			
			rslt.put("data", data);
			
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);

			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return null;
	}
	
	/**
	 * 获取未处理公交传感器报警数据
	 * @return
	 */
	public String getUnhandledSensorAlarmDataList() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			List<String> ids = new ArrayList<String>();
			if(null!=busIds){//获取指定车辆的
				ids = stringToArray(busIds);
			}else{//获取名下管理车辆的
				ids = LzzBusMgr.getUserMgrBusesIDList(curUser);
			}
			
			for(int i=0; i<ids.size(); i++){
				List<LzzSensorAlarmData> alarm_datas = LzzSensorDataService.self().getLzzSensorAlarmDataListByBusIdAndHandled(ids.get(i), "0");
				for(int j=alarm_datas.size()-1; j>=0; j--){
					if(alarm_datas.get(j).getCreateTime().compareTo(startTime)>=0
							&& alarm_datas.get(j).getCreateTime().compareTo(endTime)<0){
						LzzSensorAlarmData sensor_data = alarm_datas.get(j);
						JSONObject obj = JSONObject.fromObject(sensor_data);
						String bus_num = LzzBusMgr.getBusNum(sensor_data.getBusId());
						String status_val = LzzDicMgr.getValueById(sensor_data.getStatusId());
						String contents = "车辆 " + bus_num + " 发生报警，报警类型 " + status_val;
						obj.put("contents", contents);
						obj.put("statusId", "1");
						obj.put("statusVal", status_val);
						obj.put("busNum", bus_num);
						obj.put("company", LzzBusMgr.getBusCompanyName(sensor_data.getBusId()));
						data.add(obj);
					}
				}
			}
			
			if(null!=pageInfo){
				JSONObject pageInfoObj = JSONObject.fromObject(pageInfo);
				if(null!=pageInfo){
					data = LzzPaging.get(data, pageInfoObj);
				}
				rslt.put("pageInfo", pageInfoObj);
			}
			
			rslt.put("data", data);
			
			//System.out.println("获取未处理报警：" + data.toString());
			
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取传感器传感器报警数据
	 * @return
	 */
	public String getSensorAlarmDataList() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			List<String> ids = new ArrayList<String>();
			if(null!=busIds){//获取指定车辆的
				ids = stringToArray(busIds);
			}else{//获取名下管理车辆的
				ids = LzzBusMgr.getUserMgrBusesIDList(curUser);
			}
			
			for(int i=0; i<ids.size(); i++){
				List<LzzSensorAlarmData> alarm_datas = LzzSensorDataService.self().getLzzSensorAlarmDataListByBusId(ids.get(i));
				for(int j=alarm_datas.size()-1; j>=0; j--){
					if(alarm_datas.get(j).getCreateTime().compareTo(startTime)>=0
							&& alarm_datas.get(j).getCreateTime().compareTo(endTime)<0){
						LzzSensorAlarmData sensor_data = alarm_datas.get(j);
						JSONObject obj = JSONObject.fromObject(sensor_data);
						String bus_num = LzzBusMgr.getBusNum(sensor_data.getBusId());
						String bus_status = LzzBusMgr.getBusStatus(sensor_data.getBusId());
						String status_val = LzzDicMgr.getValueById(bus_status);
						String contents = "车辆 " + bus_num + " 发生报警，报警类型 " + status_val;
						obj.put("contents", contents);
						
						obj.put("orderNum", alarm_datas.size()-j);
						obj.put("company", LzzBusMgr.getBusCompanyName(sensor_data.getBusId()));
						obj.put("line", LzzBusMgr.getBusLineName(sensor_data.getBusId()));
						obj.put("busNum", bus_num);
						obj.put("status", sensor_data.getStatusName());
						obj.put("level", sensor_data.getStatusName());
						obj.put("time", sensor_data.getCreateTime());
						String handled = "未处理";
						String handler = "-";
						
						if("1".equals(sensor_data.getHandled())){
							LzzAlarmHandleRecord record = LzzAlarmHandleRecordService.self().getLzzAlarmHandleRecordByAlarmId(sensor_data.getId());
							handled = LzzAlarmHandleMgr.getHandleRecordComment(record);
							handler = LzzUserMgr.getUserLastName(record.getHandler());
						}
						obj.put("handled", handled);
						obj.put("handler", handler);
						
						data.add(obj);
					}
				}
			}
			
			if(null!=pageInfo){
				JSONObject pageInfoObj = JSONObject.fromObject(pageInfo);
				if(null!=pageInfo){
					data = LzzPaging.get(data, pageInfoObj);
				}
				rslt.put("pageInfo", pageInfoObj);
			}
			
			rslt.put("data", data);
			
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取报警处理记录数据
	 * @return
	 */
	public String getAlarmHandleRecordList() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			List<String> ids = new ArrayList<String>();
			if(null!=busIds){//获取指定车辆的
				ids = stringToArray(busIds);
			}else{//获取名下管理车辆的
				ids = LzzBusMgr.getUserMgrBusesIDList(curUser);
			}
			
			int curIndex = 1;
			List<LzzAlarmHandleRecord> records = LzzAlarmHandleRecordService.self().getAllValidLzzAlarmHandleRecord();
			for(int j=records.size()-1; j>=0; j--){
				if(records.get(j).getCreateTime().compareTo(startTime + " 00:00:00")>=0
						&& records.get(j).getCreateTime().compareTo(endTime + " 23:59:59")<=0){
					LzzAlarmHandleRecord record = records.get(j);
					String bus_id = record.getBusId();
					
					if(ids.contains(bus_id)){
						String bus_line = LzzBusMgr.getBusLineName(bus_id);
						String bus_num = LzzBusMgr.getBusNum(bus_id);
						String company = LzzBusMgr.getBusCompanyName(bus_id);
						String sensor_handle = record.getSensorAlarmHandleRecord();
						if("1".equals(record.getIsSensorAlarmValid())){
							sensor_handle += "(有效报警)"; 
						}else if("0".equals(record.getIsSensorAlarmValid())){
							sensor_handle += "(无效报警)"; 
						}
						String driver_handle = record.getDriverAlarmHandleRecord();
						if("1".equals(record.getIsDriverAlarmValid())){
							driver_handle += "(有效报警)"; 
						}else if("0".equals(record.getIsDriverAlarmValid())){
							driver_handle += "(无效报警)"; 
						}
						
						String comment = sensor_handle + "|" + driver_handle;
						JSONObject obj = new JSONObject();
						obj.put("orderNum", curIndex++);
						obj.put("company", company);
						obj.put("line", bus_line);
						obj.put("busNum", bus_num);
						obj.put("comment", comment);
						String handler = LzzUserMgr.getUserLastName(record.getHandler());
						obj.put("handleUser", null==handler?"":handler);
						obj.put("createTime", record.getCreateTime());
						data.add(obj);
					}
					
				}
			}
			
			if(null!=pageInfo){
				JSONObject pageInfoObj = JSONObject.fromObject(pageInfo);
				if(null!=pageInfo){
					data = LzzPaging.get(data, pageInfoObj);
				}
				rslt.put("pageInfo", pageInfoObj);
			}
			
			rslt.put("data", data);
			
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取故障记录列表
	 * @return
	 */
	public String getFaultInfoList() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			List<String> ids = new ArrayList<String>();
			if(null!=busIds){//获取指定车辆的
				ids = stringToArray(busIds);
			}else{//获取名下管理车辆的
				ids = LzzBusMgr.getUserMgrBusesIDList(curUser);
			}
			
			int curIndex = 1;
			List<LzzRepair> repairs = LzzRepairService.self().getAllValidLzzRepair();
			for(int j=repairs.size()-1; j>=0; j--){
				if(repairs.get(j).getCreateTime().compareTo(startTime + " 00:00:00")>=0
						&& repairs.get(j).getCreateTime().compareTo(endTime + " 23:59:59")<=0){
					LzzRepair repair = repairs.get(j);
					String bus_id = repair.getBusId();
					
					if(ids.contains(bus_id)){
						String bus_line = LzzBusMgr.getBusLineName(bus_id);
						String bus_num = LzzBusMgr.getBusNum(bus_id);
						String company = LzzBusMgr.getBusCompanyName(bus_id);
						JSONObject obj = new JSONObject();
						obj.put("orderNum", curIndex++);
						obj.put("company", company);
						obj.put("line", bus_line);
						obj.put("busNum", bus_num);
						obj.put("comment", repair.getComment());
						obj.put("createTime", repair.getModifyTime());
						data.add(obj);
					}
					
				}
			}
			
			if(null!=pageInfo){
				JSONObject pageInfoObj = JSONObject.fromObject(pageInfo);
				if(null!=pageInfo){
					data = LzzPaging.get(data, pageInfoObj);
				}
				rslt.put("pageInfo", pageInfoObj);
			}
			
			rslt.put("data", data);
			
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取公交传感器数据
	 * @return
	 */
	public String setPrevAlarmHandled() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			if(null!=busIds){
				List<String> ids = stringToArray(busIds);
				for(int i=0; i<ids.size(); i++){
					LzzSensorDataMgr.setPrevAlarmHandled(ids.get(i));
				}
			}
			
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);

			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return null;
	}
	
	public String alarmId;
	/**
	 * 获取报警类型
	 * @return
	 */
	public String getAlarmType() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONObject data = new JSONObject();
		boolean success = true;
		try {
			LzzSensorAlarmData alarm = LzzSensorDataService.self().getLzzSensorAlarmDataById(alarmId);
			if(null==alarm){
				throw new LzzException("报警记录不存在");
			}
			
			String status_name = alarm.getStatusName();
			String status_id = alarm.getStatusId();
			data.put("statusName", status_name);
			data.put("hasSensorAlarm", LzzDicMgr.isSensorAlarm(status_id));
			data.put("hasDriverAlarm", LzzDicMgr.isDriverAlarm(status_id));
			
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			success = false;
			rslt.put("errMsg", e.getMessage());
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return null;
	}
	
	/**
	 * 处理报警
	 * @return
	 */
	public String handleAlarm() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			JSONObject record = JSONObject.fromObject(postData);
			String alarm_id = record.getString("alarmId");
			LzzSensorAlarmData alarm = LzzSensorDataService.self().getLzzSensorAlarmDataById(alarm_id);
			if(null==alarm){
				throw new LzzException("您不能处理不存在的报警记录！");
			}
			
			if("1".equals(alarm.getHandled())){
				throw new LzzException("请勿重复处理报警记录");
			}
			alarm.setHandled("1");
			String driver_valid = record.getString("driverAlarmValid");
			String driver_record = record.getString("driverAlarmComment");
			String sensor_valid = record.getString("sensorAlarmValid");
			String sensor_record = record.getString("sensorAlarmComment");
			LzzSensorDataMgr.recordAlarmHandleRecord(
					alarm_id, driver_valid, driver_record, sensor_valid, sensor_record, curUser.getId());
			LzzSensorDataService.self().updateLzzSensorAlarmData(alarm);
			
			String bus_id = alarm.getBusId();
			List<LzzSensorAlarmData> alarms = LzzSensorDataMgr.getUnHandledAlarm(bus_id);
			if(alarms.size()==0){//当前车辆没有报警数据了，设置车辆报警已处理
				LzzBusMgr.setBusStatusToAlarmHandling(bus_id);
			}
			
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			success = false;
			rslt.put("errMsg", e.getMessage());
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}

	private List<String> stringToArray(String str_ids) {
		str_ids = str_ids.replaceAll("\\[", "");
		str_ids = str_ids.replaceAll("\\]", "");
		str_ids = str_ids.replaceAll(" ", "");
		String[] ids = str_ids.split(",");
		List<String> rslt = new ArrayList<String>();
		for(int i=0; i<ids.length; i++){
			rslt.add(ids[i]);
		}
		return rslt;
	}
}
