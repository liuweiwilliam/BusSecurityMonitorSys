package com.lzz.bussecurity.action.bus;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.Transaction;

import com.lzz.bussecurity.action.LzzBaseManagerAction;
import com.lzz.bussecurity.cachemgr.LzzBusCacheMgr;
import com.lzz.bussecurity.factory.LzzFactory;
import com.lzz.bussecurity.mgr.LzzBusMgr;
import com.lzz.bussecurity.mgr.LzzDicMgr;
import com.lzz.bussecurity.mgr.LzzEncodeMgr;
import com.lzz.bussecurity.mgr.LzzSensorDataMgr;
import com.lzz.bussecurity.mgr.LzzUserMgr;
import com.lzz.bussecurity.pojo.LzzBus;
import com.lzz.bussecurity.pojo.LzzBusLine;
import com.lzz.bussecurity.pojo.LzzCamera;
import com.lzz.bussecurity.pojo.LzzCompany;
import com.lzz.bussecurity.pojo.LzzRole;
import com.lzz.bussecurity.pojo.LzzUser;
import com.lzz.bussecurity.service.LzzBusLineService;
import com.lzz.bussecurity.service.LzzBusService;
import com.lzz.bussecurity.service.LzzCameraService;
import com.lzz.bussecurity.service.LzzCompanyService;
import com.lzz.bussecurity.service.LzzUserService;
import com.lzz.bussecurity.utils.LzzException;

public class LzzBusAction extends LzzBaseManagerAction {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 6065078211299805543L;

	public String info;
	/**
	 * 编辑用户信息
	 * @return
	 */
	public String addOrUpdateBus() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		boolean success = true;
		try {
			JSONObject json_info = JSONObject.fromObject(info);
			String id = (String) json_info.get("id");
			LzzBus bus = null;
			if(null==id || "".equals(id)){
				bus = new LzzBus();
			}else{
				bus = LzzBusService.self().getLzzBusById(id);
			}
			
			String line_id = json_info.getString("lineId");
			bus.setLineId(line_id);
			
			String bus_num = json_info.getString("busNum");
			bus.setCarNum(bus_num);
			
			if(null==id || "".equals(id)){
				LzzBusService.self().saveLzzBus(bus);
			}else{
				LzzBusService.self().updateLzzBus(bus);
			}
				
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	public String id;
	/**
	 * 删除车辆信息
	 * @return
	 */
	public String delBus() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		boolean success = true;
		try {
			LzzBus bus = LzzBusService.self().getLzzBusById(id);
			bus.setDr("1");
			LzzBusService.self().updateLzzBus(bus);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取用户能管理的公交树状数据
	 * @return
	 */
	public String getUserMgrBusList() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONObject data = new JSONObject();
		boolean success = true;
		try {
			data = LzzBusMgr.getUserMgrBusList(curUser);
			
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);

			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return null;
	}
	
	/**
	 * 获取用户管理车辆列表
	 * @return
	 */
	public String getUserMgrBuses() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			data = LzzBusMgr.getUserMgrBuses(curUser);
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取用户管理公交线路
	 * @return
	 */
	public String getUserMgrBusLines() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			String company_id = curUser.getCompanyId();
			data = LzzBusMgr.getBusLine(data, company_id);
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取报警车辆列表
	 * @return
	 */
	public String getAlarmedBuses() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			data = LzzBusMgr.getUserMgrBuses(curUser);
			for(int i=0; i<data.size(); i++){
				JSONObject sin = data.getJSONObject(i);
				if(!"1".equals(sin.getString("status"))){
					data.remove(i);
					i--;
				}
			}
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取车辆报警信息
	 * @return
	 */
	public String getBusAlarmMsg() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		boolean success = true;
		try {
			String bus_num = LzzBusMgr.getBusNum(busId);
			String bus_status = LzzBusMgr.getBusStatus(busId);
			String status_val = LzzDicMgr.getValueById(bus_status);
			String data = "车辆 " + bus_num + " 发生报警，报警类型 " + status_val;
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取车辆基础信息
	 * @return
	 */
	public String getBusBaseInfo() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONObject data = new JSONObject();
		boolean success = true;
		try {
			String bus_company = LzzBusMgr.getBusCompanyName(busId);
			String bus_line = LzzBusMgr.getBusLineName(busId);
			String bus_num = LzzBusMgr.getBusNum(busId);
			int bus_sensor_count = LzzBusMgr.getSensorCount(busId);
			String driver_flag = LzzBusMgr.getDriverFlag(busId);
			
			data.put("company", bus_company);
			data.put("line", bus_line);
			data.put("busNum", bus_num);
			data.put("sensorCount", bus_sensor_count);
			data.put("driverFlag", "1".equals(driver_flag)?"开":"关");
			
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取车辆传感器状态
	 * @return
	 */
	public String getBusSensorStatus() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			String sensor_status = LzzBusMgr.getBusSensorStatus(busId);
			
			if(null!=sensor_status
					&& !"".equals(sensor_status)){
				for(int i=0; i<sensor_status.length(); i++){
					JSONObject sensor = new JSONObject();
					char sin = sensor_status.charAt(i);
					sensor.put("name", (i+1)+"号传感器");
					sensor.put("status", sin);
					data.add(sensor);
				}
			}
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			
			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 获取车辆摄像头信息
	 * @return
	 */
	public String getBusCamera() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONObject data = new JSONObject();
		boolean success = true;
		try {
			data = LzzBusMgr.getBusCameraInfo(busId);
			if(null==data){
				throw new LzzException("未找到该车辆摄像头信息，请录入后重试！");
			}
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			success = false;
			rslt.put("errMsg", e.getMessage());
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	public String busIds;
	/**
	 * 获取bus位置
	 * @return
	 */
	public String getBusPos() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		JSONArray data = new JSONArray();
		boolean success = true;
		try {
			if(null!=busIds){
				String[] ids = busIds.split(",");
				for(int i=0; i<ids.length; i++){
					JSONObject sin_data = LzzBusMgr.getBusPos(ids[i]);
					data.add(sin_data);
				}
			}
			
			rslt.put("data", data);
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);

			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return null;
	}
	
	public String busId;
	public String flag;
	/**
	 * 设置公交忽略警告
	 * @return
	 */
	public String setBusAlarmIgnore() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		boolean success = true;
		try {
			LzzBusMgr.setBusAlermIgnore(busId, flag);
			if("1".equals(flag)){
				LzzSensorDataMgr.setPrevAlarmHandled(busId);
			}
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			
			LzzBusCacheMgr.self().reloadCache();
			
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);

			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return null;
	}
	
	/**
	 * 获取公交忽略警告标志
	 * @return
	 */
	public String getBusAlarmIgnore() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		boolean success = true;
		try {
			boolean flag = LzzBusMgr.getBusAlarmIgnoreFlag(busId);
			rslt.put("data", flag);
			
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			
			LzzBusCacheMgr.self().reloadCache();
			
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);

			success = false;
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return null;
	}
	
	/**
	 * 导入公交信息
	 * @return
	 */
	public String importBusInfo() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		boolean success = true;
		try {
			JSONObject post_data = JSONObject.fromObject(postData);
			JSONArray data = post_data.getJSONArray("busData");
			String company_name = post_data.getString("company");
			LzzCompany company = LzzCompanyService.self().getLzzCompanyByName(company_name);
			if(null==company){
				throw new LzzException("对不起，你导入的数据的公交公司不存在!");
			}
			
			//判断该用户是不是属于该公司
			String user_com = curUser.getCompanyId();
			if(!user_com.equals(company.getId())){
				throw new LzzException("对不起，您不属于该公司，没有权限导入!");
			}
			
			for(int i=0; i<data.size(); i++){
				JSONObject sin_bus = data.getJSONObject(i);
				String line_num = sin_bus.getString("lineNum");
				String car_num = sin_bus.getString("carNum");
				String lat = sin_bus.getString("lat");
				String lng = sin_bus.getString("lng");
				
				LzzBusLine line = LzzBusLineService.self()
						.getLzzBusLineByCompanyIdAndLineNum(company.getId(), line_num);
				if(null==line){
					//新建公交线路
					line = new LzzBusLine();
					line.setCompanyId(company.getId());
					line.setLineNum(line_num);
					LzzBusLineService.self().saveLzzBusLine(line);
				}
				
				LzzBus bus = LzzBusService.self().getLzzBusByCarNum(car_num);
				if(null==bus){
					bus = new LzzBus();
				}
				
				bus.setCarNum(car_num);
				bus.setLineId(line.getId());
				bus.setLat(lat);
				bus.setLng(lng);
				LzzBusService.self().saveOrUpdateLzzBus(bus);
			}
			
			ts.commit();
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			
			LzzBusCacheMgr.self().reloadCache();
			
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			success = false;
			rslt.put("errMsg", e.getMessage());
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
	
	/**
	 * 导入公交摄像头信息
	 * @return
	 */
	public String importBusCamera() {
		Transaction ts = LzzFactory.currentSession().beginTransaction();
		JSONObject rslt = new JSONObject();
		boolean success = true;
		try {
			JSONObject post_data = JSONObject.fromObject(postData);
			JSONArray data = post_data.getJSONArray("cameraData");
			
			String user_com = curUser.getCompanyId();
			String errMsg = "";
			for(int i=0; i<data.size(); i++){
				JSONObject sin_bus = data.getJSONObject(i);
				String car_num = sin_bus.getString("carNum");
				String ip = sin_bus.getString("ip");
				String port = sin_bus.getString("port");
				String uname = sin_bus.getString("uname");
				String pwd = sin_bus.getString("pwd");
				String com_id = sin_bus.getString("comId");
				
				LzzBus bus = LzzBusService.self().getLzzBusByCarNum(car_num);
				if(null==bus){
					success = false;
					errMsg = "未找到车辆 " + car_num;
					break;
				}
				
				String bus_company = LzzBusMgr.getLineCompanyId(bus.getLineId());
				if(!user_com.equals(bus_company)){//车辆不属于公司名下
					continue;
				}
					
				LzzCamera camera = LzzCameraService.self().getLzzCameraByBusId(bus.getId());
				if(null==camera){
					camera = new LzzCamera();
				}
				
				camera.setBusId(bus.getId());
				camera.setIp(ip);
				camera.setSwingPort(port);
				camera.setUname(uname);
				camera.setPwd(pwd);
				camera.setCommunicateId(com_id);
				
				LzzCameraService.self().saveOrUpdateLzzCamera(camera);
			}
			
			if(!success){
				rslt.put("errMsg", errMsg);
			}else{
				ts.commit();
			}
		} catch (Exception e) {
			e.printStackTrace();
			try {
				ts.rollback();
			} catch (Exception ee) {
				ee.printStackTrace();
			}
			
			LzzBusCacheMgr.self().reloadCache();
			
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			success = false;
			rslt.put("errMsg", e.getMessage());
		} finally {
			LzzFactory.closeSession();
			PrintWriter writer;
			try {
				rslt.put("success", success);
				response.setCharacterEncoding("UTF-8");
				writer = response.getWriter();
				writer.append(rslt.toString());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
}
